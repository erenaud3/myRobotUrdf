<?xml version="1.0"?>
<robot name="dummyRplidarSquare" xmlns:xacro="http://ros.org/wiki/xacro">

    <material name="blue">
        <color rgba="0 0 0.8 1"/>
    </material>
    <material name="black">
        <color rgba="0 0 0 1"/>
    </material>
    <material name="white">
        <color rgba="1 1 1 1"/>
    </material>

    <xacro:property name="baseWidth" value="0.25" />
    <xacro:property name="baseHeight" value="0.2" />
    <xacro:property name="baseLength" value="0.4" />
    <xacro:property name="baseClearance" value="0.03" />
    <xacro:property name="wheelsPosition" value="+0.10" />
    <xacro:property name="casterPosition" value="-0.15" />

    <xacro:property name="wheelRadius" value="0.1" />
    <xacro:property name="wheelThickness" value="0.035" />
    <xacro:property name="wheelClearance" value="0.01" />
    <xacro:property name="wheelMass" value="2" />
    <xacro:property name="hingeHeightInBase" value="0.07" />

    <xacro:property name="casterRadius" value="0.05" />
    <xacro:property name="casterHeight" value="0.04" />
    <xacro:property name="casterMass" value="0.00001" />

    <xacro:macro name="default_inertial" params="mass">
        <inertial>
            <mass value="${mass}" />
            <inertia ixx="1.0" ixy="0.0" ixz="0.0" iyy="1.0" iyz="0.0" izz="1.0" />
        </inertial>
    </xacro:macro>

    <link name="base_footprint"/>
    <!--
       Base link is set at the bottom of the base mould.
       This is done to be compatible with the way base link
       was configured for turtlebot 1. Refer to

       https://github.com/turtlebot/turtlebot/issues/40

       To put the base link at the more oft used wheel
       axis, set the z-distance from the base_footprint
       to 0.352.
      -->
    <joint name="base_joint" type="fixed">
      <origin xyz="0 0 0.0102" rpy="0 0 0" />
      <parent link="base_footprint"/>
      <child link="base_link" />
    </joint>

    <link name="base_link">
        <visual>
            <geometry>
                <box size="${baseLength} ${baseWidth} ${baseHeight}"/>
            </geometry>
            <material name="blue"/>
        </visual>
        <collision>
            <geometry>
                <box size="${baseLength} ${baseWidth} ${baseHeight}"/>
            </geometry>
        </collision>
        <inertial>
          <mass value="10"/>
          <inertia ixx="0.1667" ixy="0.0" ixz="0.0" iyy="0.1854" iyz="0.0" izz="0.0854"/>
        </inertial>
    </link>


    <link name="right_wheel">
        <visual>
            <!-- <origin rpy="0 0 0" xyz="0 0 {-1*(wheelThickness/2 + wheelClearance)}"/> -->
            <origin rpy="0 0 0" xyz="0 0 0"/>
            <geometry>
                <cylinder length="${wheelThickness}" radius="${wheelRadius}"/>
            </geometry>
            <material name="white"/>
        </visual>
        <collision>
            <origin rpy="0 0 0" xyz="0 0 0"/>
            <geometry>
                <cylinder length="${wheelThickness}" radius="${wheelRadius}"/>
            </geometry>
        </collision>
        <inertial>
            <origin rpy="0 0 0" xyz="0 0 0"/>
            <mass value="${wheelMass}"/>
            <inertia ixx="0.0052" ixy="0.0" ixz="0.0" iyy="0.0052" iyz="0.0" izz="0.01"/>
            <!-- <xacro:default_inertial mass="0.5"/> -->
            <!-- <mass value="0.01" />
            <inertia ixx="0.001" ixy="0.0" ixz="0.0"
                     iyy="0.001" iyz="0.0"
                     izz="0.001" /> -->
        </inertial>
    </link>

    <joint name="base_to_right_wheel" type="continuous">
        <!-- <axis rpy="0 0 0" xyz="0 0 1"/> -->
        <axis rpy="0 0 0" xyz="0 0 1"/>
        <parent link="base_link"/>
        <child link="right_wheel"/>
        <!-- <origin xyz="0 -0.175 -0.23" rpy="1.57075 0 0"/> -->
        <origin xyz="${wheelsPosition} -${(wheelThickness/2 + baseWidth/2 + wheelClearance)} -${baseHeight/2 - hingeHeightInBase}" rpy="-1.57075 0 0"/>
        <!-- <origin xyz="0 -1 0" rpy="0 0 0"/> -->

    </joint>

    <!-- This block provides the simulator (Gazebo) with information on a few additional
    physical properties. See http://gazebosim.org/tutorials/?tut=ros_urdf for more-->
    <gazebo reference="right_wheel">
        <mu1 value="75.0"/>
        <mu2 value="75.0"/>
        <kp value="1000000.0" />
        <kd value="1.0" />
        <material>Gazebo/Grey</material>
    </gazebo>

    <!-- This block connects the wheel joint to an actuator (motor), which informs both
    simulation and visualization of the robot -->
    <transmission name="right_wheel_trans">
        <type>transmission_interface/SimpleTransmission</type>
        <actuator name="right_wheel_motor">
            <mechanicalReduction>1</mechanicalReduction>
        </actuator>
        <joint name="base_to_right_wheel">
            <hardwareInterface>hardware_interface/VelocityJointInterface</hardwareInterface>
        </joint>
    </transmission>


    <link name="left_wheel">
        <visual>
            <!-- <origin rpy="0 0 0" xyz="0 0 {-1*(wheelThickness/2 + wheelClearance)}"/> -->
            <origin rpy="0 0 0" xyz="0 0 0"/>
            <geometry>
                <cylinder length="${wheelThickness}" radius="${wheelRadius}"/>
            </geometry>
            <material name="white"/>
        </visual>
        <collision>
            <origin rpy="0 0 0" xyz="0 0 0"/>
            <geometry>
                <cylinder length="${wheelThickness}" radius="${wheelRadius}"/>
            </geometry>
        </collision>
        <inertial>
            <origin rpy="0 0 0" xyz="0 0 0"/>
            <mass value="${wheelMass}"/>
            <inertia ixx="0.0052" ixy="0.0" ixz="0.0" iyy="0.0052" iyz="0.0" izz="0.01"/>
            <!-- <xacro:default_inertial mass="0.5"/> -->
            <!-- <mass value="0.01" />
            <inertia ixx="0.001" ixy="0.0" ixz="0.0"
                     iyy="0.001" iyz="0.0"
                     izz="0.001" /> -->
        </inertial>
    </link>

    <joint name="base_to_left_wheel" type="continuous">
        <axis rpy="0 0 0" xyz="0 0 1"/>
        <parent link="base_link"/>
        <child link="left_wheel"/>
        <!-- <origin xyz="0 -0.175 -0.23" rpy="1.57075 0 0"/> -->
        <origin xyz="${wheelsPosition} +${(wheelThickness/2 + baseWidth/2 + wheelClearance)} -${baseHeight/2 - hingeHeightInBase}" rpy="-1.57075 0 0"/>
        <!-- <origin xyz="0 1 0" rpy="0 0 0"/> -->

    </joint>

    <!-- This block provides the simulator (Gazebo) with information on a few additional
    physical properties. See http://gazebosim.org/tutorials/?tut=ros_urdf for more-->
    <gazebo reference="left_wheel">
        <mu1 value="75.0"/>
        <mu2 value="75.0"/>
        <kp value="1000000.0" />
        <kd value="1.0" />
        <material>Gazebo/Grey</material>
    </gazebo>

    <!-- This block connects the wheel joint to an actuator (motor), which informs both
    simulation and visualization of the robot -->
    <transmission name="left_wheel_trans">
        <type>transmission_interface/SimpleTransmission</type>
        <actuator name="left_wheel_motor">
            <mechanicalReduction>1</mechanicalReduction>
        </actuator>
        <joint name="base_to_left_wheel">
            <hardwareInterface>hardware_interface/VelocityJointInterface</hardwareInterface>
        </joint>
    </transmission>


    <link name="caster_back">
        <visual>
            <origin rpy="0 0 0" xyz="0 0 0"/>
            <geometry>
                <sphere radius="${casterRadius}"/>
            </geometry>
            <material name="white"/>
        </visual>
        <collision>
            <!-- <geometry>
                <cylinder length="${casterHeight}" radius="${casterRadius}"/>
            </geometry> -->
            <geometry>
                <sphere radius="${casterRadius}"/>
            </geometry>
            <surface>
                <friction>
                    <ode>
                        <mu>0</mu>
                        <mu2>0</mu2>
                        <slip1>1.0</slip1>
                        <slip2>1.0</slip2>
                    </ode>
                </friction>
            </surface>
        </collision>
        <inertial>
            <mass value="${casterMass}"/>
            <!-- <inertia ixx="0.0002275" ixy="0.0" ixz="0.0" iyy="0.0002275" iyz="0.0" izz="0.000375"/> -->
            <inertia ixx="0.00000001" ixy="0.0" ixz="0.0" iyy="0.00000001" iyz="0.0" izz="0.00000001"/>
        </inertial>
    </link>

    <!-- <link name="caster_back">
        <visual>
            <origin rpy="0 0 0" xyz="0 0 0"/>
            <geometry>
                <cylinder length="${casterHeight}" radius="${casterRadius}"/>
            </geometry>
            <material name="white"/>
        </visual>
        <collision>
            <geometry>
                <cylinder length="${casterHeight}" radius="${casterRadius}"/>
            </geometry>
            <surface>
                <friction>
                    <ode>
                        <mu>0</mu>
                        <mu2>0</mu2>
                        <slip1>1.0</slip1>
                        <slip2>1.0</slip2>
                    </ode>
                </friction>
            </surface>
        </collision>
        <inertial>
            <mass value="${casterMass}"/>
            <inertia ixx="0.0002275" ixy="0.0" ixz="0.0" iyy="0.0002275" iyz="0.0" izz="0.000375"/>
        </inertial>
    </link> -->

    <joint name="base_to_caster_back" type="fixed">
        <parent link="base_link"/>
        <child link="caster_back"/>
        <origin xyz="${casterPosition} 0 -${baseHeight/2 + baseClearance - casterRadius}" rpy="1.57075 0 0"/>
    </joint>

    <gazebo reference="base_to_caster_back">
        <!-- <mu1>0.0</mu1>
        <mu2>0.0</mu2>
        <kp>1.0</kp>
        <kd>100000.0</kd>
        <minDepth>0.001</minDepth>
        <maxVel>1.0</maxVel> -->
        <mu1 value="0.0"/>
        <mu2 value="0.0"/>
        <kp value="1000000.0" />
        <kd value="1.0" />
        <!-- <minDepth value="1"/>
        <maxVel value="1.0" /> -->
        <material>Gazebo/Grey</material>
    </gazebo>

    <!-- Kobuki's sensors -->
    <joint name="gyro_joint" type="fixed">
      <axis xyz="0 1 0"/>
      <origin xyz="${wheelsPosition} 0 -${baseHeight/2 - hingeHeightInBase}" rpy="0 0 0"/>
      <parent link="base_link"/>
      <child link="gyro_link"/>
    </joint>
    <link name="gyro_link">
      <inertial>
        <mass value="0.001"/>
        <origin xyz="0 0 0" rpy="0 0 0"/>
        <inertia ixx="0.0001" ixy="0" ixz="0"
                 iyy="0.000001" iyz="0"
                 izz="0.0001"/>
      </inertial>
    </link>


    <!-- <gazebo reference="gyro_link">
     <sensor type="imu" name="imu">
      <always_on>true</always_on>
      <update_rate>50</update_rate>
      <visualize>false</visualize>
      <imu>
        <noise>
          <type>gaussian</type>
            <rate>
              <mean>0.0</mean>
              <stddev>${0.0014*0.0014}</stddev>
              <bias_mean>0.0</bias_mean>
              <bias_stddev>0.0</bias_stddev>
            </rate>
              <accel>
                  <mean>0.0</mean>
                  <stddev>1.7e-2</stddev>
                  <bias_mean>0.1</bias_mean>
                  <bias_stddev>0.001</bias_stddev>
              </accel>
        </noise>
        </imu>
    </sensor>
    </gazebo> -->

    <gazebo reference="gyro_link">
        <gravity>true</gravity>
        <sensor name="imu_sensor" type="imu">
            <always_on>true</always_on>
            <update_rate>100</update_rate>
            <visualize>true</visualize>
            <topic>__default_topic__</topic>
            <plugin filename="libgazebo_ros_imu_sensor.so" name="imu_plugin">
                <topicName>imu</topicName>
                <bodyName>gyro_link</bodyName>
                <updateRateHZ>10.0</updateRateHZ>
                <gaussianNoise>0.0</gaussianNoise>
                <xyzOffset>0 0 0</xyzOffset>
                <rpyOffset>0 0 0</rpyOffset>
                <frameName>gyro_link</frameName>
            </plugin>
            <pose>0 0 0 0 0 0</pose>
        </sensor>
    </gazebo>

    <gazebo>
      <plugin name="gazebo_ros_control" filename="libgazebo_ros_control.so">
        <robotNamespace>/</robotNamespace>

        <!-- <publish_tf>1</publish_tf>
        <left_wheel_joint_name>base_to_left_wheel</left_wheel_joint_name>
        <right_wheel_joint_name>base_to_right_wheel</right_wheel_joint_name>
        <wheel_separation>0.305</wheel_separation>
        <wheel_diameter>0.01</wheel_diameter>
        <torque>1.0</torque>
        <velocity_command_timeout>0.6</velocity_command_timeout> -->

        <!-- <bumper_name>bumpers</bumper_name>
        <imu_name>imu</imu_name> -->


      </plugin>
    </gazebo>


    <xacro:include filename="$(find hector_sensors_description)/urdf/hokuyo_utm30lx.urdf.xacro" />
    <!-- For the moment, we only have a hokuyo with rplidar'specs. -->
     <xacro:hokuyo_utm30lx name="hokuyo_laser" parent="base_link" ros_topic="scan" update_rate="5.5" ray_count="360" min_angle="0" max_angle="359">
       <origin xyz="0 0 ${(baseClearance + baseHeight)/2}" rpy="0 0 0"/>
     </xacro:hokuyo_utm30lx>

</robot>
